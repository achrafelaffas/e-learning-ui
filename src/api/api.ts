/* tslint:disable */
/* eslint-disable */
/**
 * Open api specification
 * Open api documentation for e-learning api
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: somestupidemail@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AuthRequestDTO
 */
export interface AuthRequestDTO {
    /**
     * 
     * @type {string}
     * @memberof AuthRequestDTO
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof AuthRequestDTO
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface AuthResponseDTO
 */
export interface AuthResponseDTO {
    /**
     * 
     * @type {string}
     * @memberof AuthResponseDTO
     */
    'token'?: string;
    /**
     * 
     * @type {UserDTO}
     * @memberof AuthResponseDTO
     */
    'user'?: UserDTO;
}
/**
 * 
 * @export
 * @interface ChapitreDTO
 */
export interface ChapitreDTO {
    /**
     * 
     * @type {number}
     * @memberof ChapitreDTO
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ChapitreDTO
     */
    'titre'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChapitreDTO
     */
    'contenu'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChapitreDTO
     */
    'video'?: string;
    /**
     * 
     * @type {CoursDTO}
     * @memberof ChapitreDTO
     */
    'cours'?: CoursDTO;
}
/**
 * 
 * @export
 * @interface CoursDTO
 */
export interface CoursDTO {
    /**
     * 
     * @type {number}
     * @memberof CoursDTO
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CoursDTO
     */
    'titre'?: string;
    /**
     * 
     * @type {string}
     * @memberof CoursDTO
     */
    'description'?: string;
    /**
     * 
     * @type {MatiereDTO}
     * @memberof CoursDTO
     */
    'matiere'?: MatiereDTO;
}
/**
 * 
 * @export
 * @interface MatiereDTO
 */
export interface MatiereDTO {
    /**
     * 
     * @type {number}
     * @memberof MatiereDTO
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof MatiereDTO
     */
    'nom'?: string;
    /**
     * 
     * @type {string}
     * @memberof MatiereDTO
     */
    'image'?: string;
    /**
     * 
     * @type {string}
     * @memberof MatiereDTO
     */
    'filiere'?: string;
    /**
     * 
     * @type {string}
     * @memberof MatiereDTO
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface ProgressDTO
 */
export interface ProgressDTO {
    /**
     * 
     * @type {number}
     * @memberof ProgressDTO
     */
    'id'?: number;
    /**
     * 
     * @type {UserDTO}
     * @memberof ProgressDTO
     */
    'etudiant'?: UserDTO;
    /**
     * 
     * @type {CoursDTO}
     * @memberof ProgressDTO
     */
    'cours'?: CoursDTO;
    /**
     * 
     * @type {boolean}
     * @memberof ProgressDTO
     */
    'checked'?: boolean;
}
/**
 * 
 * @export
 * @interface ProgressPerCoursDTO
 */
export interface ProgressPerCoursDTO {
    /**
     * 
     * @type {CoursDTO}
     * @memberof ProgressPerCoursDTO
     */
    'cours'?: CoursDTO;
    /**
     * 
     * @type {number}
     * @memberof ProgressPerCoursDTO
     */
    'progress'?: number;
}
/**
 * 
 * @export
 * @interface ProgressPerMatiere
 */
export interface ProgressPerMatiere {
    /**
     * 
     * @type {MatiereDTO}
     * @memberof ProgressPerMatiere
     */
    'matiere'?: MatiereDTO;
    /**
     * 
     * @type {number}
     * @memberof ProgressPerMatiere
     */
    'progress'?: number;
}
/**
 * 
 * @export
 * @interface QuestionDTO
 */
export interface QuestionDTO {
    /**
     * 
     * @type {number}
     * @memberof QuestionDTO
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof QuestionDTO
     */
    'enonce'?: string;
    /**
     * 
     * @type {Array<ReponseDTO>}
     * @memberof QuestionDTO
     */
    'reponses'?: Array<ReponseDTO>;
}
/**
 * 
 * @export
 * @interface QuizDTO
 */
export interface QuizDTO {
    /**
     * 
     * @type {number}
     * @memberof QuizDTO
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof QuizDTO
     */
    'titre'?: string;
    /**
     * 
     * @type {Array<QuestionDTO>}
     * @memberof QuizDTO
     */
    'questions'?: Array<QuestionDTO>;
    /**
     * 
     * @type {CoursDTO}
     * @memberof QuizDTO
     */
    'cours'?: CoursDTO;
}
/**
 * 
 * @export
 * @interface RegRequestDTO
 */
export interface RegRequestDTO {
    /**
     * 
     * @type {string}
     * @memberof RegRequestDTO
     */
    'nom': string;
    /**
     * 
     * @type {string}
     * @memberof RegRequestDTO
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof RegRequestDTO
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface ReponseDTO
 */
export interface ReponseDTO {
    /**
     * 
     * @type {number}
     * @memberof ReponseDTO
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ReponseDTO
     */
    'texte'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ReponseDTO
     */
    'estCorrect'?: boolean;
}
/**
 * 
 * @export
 * @interface Role
 */
export interface Role {
    /**
     * 
     * @type {number}
     * @memberof Role
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Role
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface UserDTO
 */
export interface UserDTO {
    /**
     * 
     * @type {number}
     * @memberof UserDTO
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof UserDTO
     */
    'nom'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDTO
     */
    'email'?: string;
    /**
     * 
     * @type {Array<Role>}
     * @memberof UserDTO
     */
    'roles'?: Array<Role>;
}

/**
 * AuthRestApi - axios parameter creator
 * @export
 */
export const AuthRestApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activate: async (token: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('activate', 'token', token)
            const localVarPath = `/auth/activate-account`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AuthRequestDTO} authRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticate: async (authRequestDTO: AuthRequestDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authRequestDTO' is not null or undefined
            assertParamExists('authenticate', 'authRequestDTO', authRequestDTO)
            const localVarPath = `/auth/authenticate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RegRequestDTO} regRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register: async (regRequestDTO: RegRequestDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'regRequestDTO' is not null or undefined
            assertParamExists('register', 'regRequestDTO', regRequestDTO)
            const localVarPath = `/auth/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(regRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthRestApi - functional programming interface
 * @export
 */
export const AuthRestApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthRestApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async activate(token: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.activate(token, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthRestApi.activate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {AuthRequestDTO} authRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authenticate(authRequestDTO: AuthRequestDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authenticate(authRequestDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthRestApi.authenticate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {RegRequestDTO} regRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async register(regRequestDTO: RegRequestDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.register(regRequestDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthRestApi.register']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthRestApi - factory interface
 * @export
 */
export const AuthRestApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthRestApiFp(configuration)
    return {
        /**
         * 
         * @param {string} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activate(token: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.activate(token, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AuthRequestDTO} authRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticate(authRequestDTO: AuthRequestDTO, options?: RawAxiosRequestConfig): AxiosPromise<AuthResponseDTO> {
            return localVarFp.authenticate(authRequestDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RegRequestDTO} regRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register(regRequestDTO: RegRequestDTO, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.register(regRequestDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthRestApi - object-oriented interface
 * @export
 * @class AuthRestApi
 * @extends {BaseAPI}
 */
export class AuthRestApi extends BaseAPI {
    /**
     * 
     * @param {string} token 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthRestApi
     */
    public activate(token: string, options?: RawAxiosRequestConfig) {
        return AuthRestApiFp(this.configuration).activate(token, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AuthRequestDTO} authRequestDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthRestApi
     */
    public authenticate(authRequestDTO: AuthRequestDTO, options?: RawAxiosRequestConfig) {
        return AuthRestApiFp(this.configuration).authenticate(authRequestDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RegRequestDTO} regRequestDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthRestApi
     */
    public register(regRequestDTO: RegRequestDTO, options?: RawAxiosRequestConfig) {
        return AuthRestApiFp(this.configuration).register(regRequestDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ChapitreRestApi - axios parameter creator
 * @export
 */
export const ChapitreRestApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} chapitreId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completeChapter: async (chapitreId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chapitreId' is not null or undefined
            assertParamExists('completeChapter', 'chapitreId', chapitreId)
            const localVarPath = `/chapitres/complete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (chapitreId !== undefined) {
                localVarQueryParameter['chapitreId'] = chapitreId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ChapitreDTO} chapitreDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createChapitre: async (chapitreDTO: ChapitreDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chapitreDTO' is not null or undefined
            assertParamExists('createChapitre', 'chapitreDTO', chapitreDTO)
            const localVarPath = `/chapitres`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(chapitreDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} chapitre 
         * @param {File} video 
         * @param {File} pdf 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createChapitreWithVideoAndPdf: async (chapitre: string, video: File, pdf: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chapitre' is not null or undefined
            assertParamExists('createChapitreWithVideoAndPdf', 'chapitre', chapitre)
            // verify required parameter 'video' is not null or undefined
            assertParamExists('createChapitreWithVideoAndPdf', 'video', video)
            // verify required parameter 'pdf' is not null or undefined
            assertParamExists('createChapitreWithVideoAndPdf', 'pdf', pdf)
            const localVarPath = `/chapitres/upload`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (chapitre !== undefined) {
                localVarQueryParameter['chapitre'] = chapitre;
            }


            if (video !== undefined) { 
                localVarFormParams.append('video', video as any);
            }
    
            if (pdf !== undefined) { 
                localVarFormParams.append('pdf', pdf as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteChapitre: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteChapitre', 'id', id)
            const localVarPath = `/chapitres/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteChapitrePdf: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteChapitrePdf', 'id', id)
            const localVarPath = `/chapitres/deletePdf/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteChapitreVideo: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteChapitreVideo', 'id', id)
            const localVarPath = `/chapitres/deleteVideo/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllChapitres: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/chapitres`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChapitreById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getChapitreById', 'id', id)
            const localVarPath = `/chapitres/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} courId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChapitresByCourId: async (courId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'courId' is not null or undefined
            assertParamExists('getChapitresByCourId', 'courId', courId)
            const localVarPath = `/chapitres/cour/{courId}`
                .replace(`{${"courId"}}`, encodeURIComponent(String(courId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} coursId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProgress: async (coursId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'coursId' is not null or undefined
            assertParamExists('getProgress', 'coursId', coursId)
            const localVarPath = `/chapitres/progress`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (coursId !== undefined) {
                localVarQueryParameter['coursId'] = coursId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ChapitreDTO} chapitreDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateChapitre: async (id: number, chapitreDTO: ChapitreDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateChapitre', 'id', id)
            // verify required parameter 'chapitreDTO' is not null or undefined
            assertParamExists('updateChapitre', 'chapitreDTO', chapitreDTO)
            const localVarPath = `/chapitres/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(chapitreDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {File} pdf 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePdfChapitre: async (id: number, pdf: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updatePdfChapitre', 'id', id)
            // verify required parameter 'pdf' is not null or undefined
            assertParamExists('updatePdfChapitre', 'pdf', pdf)
            const localVarPath = `/chapitres/uploadPdf/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (pdf !== undefined) { 
                localVarFormParams.append('pdf', pdf as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {File} video 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateVideoChapitre: async (id: number, video: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateVideoChapitre', 'id', id)
            // verify required parameter 'video' is not null or undefined
            assertParamExists('updateVideoChapitre', 'video', video)
            const localVarPath = `/chapitres/uploadVideo/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (video !== undefined) { 
                localVarFormParams.append('video', video as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ChapitreRestApi - functional programming interface
 * @export
 */
export const ChapitreRestApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ChapitreRestApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} chapitreId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async completeChapter(chapitreId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.completeChapter(chapitreId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChapitreRestApi.completeChapter']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ChapitreDTO} chapitreDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createChapitre(chapitreDTO: ChapitreDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChapitreDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createChapitre(chapitreDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChapitreRestApi.createChapitre']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} chapitre 
         * @param {File} video 
         * @param {File} pdf 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createChapitreWithVideoAndPdf(chapitre: string, video: File, pdf: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChapitreDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createChapitreWithVideoAndPdf(chapitre, video, pdf, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChapitreRestApi.createChapitreWithVideoAndPdf']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteChapitre(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteChapitre(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChapitreRestApi.deleteChapitre']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteChapitrePdf(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChapitreDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteChapitrePdf(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChapitreRestApi.deleteChapitrePdf']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteChapitreVideo(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChapitreDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteChapitreVideo(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChapitreRestApi.deleteChapitreVideo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllChapitres(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ChapitreDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllChapitres(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChapitreRestApi.getAllChapitres']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getChapitreById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChapitreDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getChapitreById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChapitreRestApi.getChapitreById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} courId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getChapitresByCourId(courId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ChapitreDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getChapitresByCourId(courId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChapitreRestApi.getChapitresByCourId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} coursId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProgress(coursId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProgress(coursId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChapitreRestApi.getProgress']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {ChapitreDTO} chapitreDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateChapitre(id: number, chapitreDTO: ChapitreDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChapitreDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateChapitre(id, chapitreDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChapitreRestApi.updateChapitre']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {File} pdf 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePdfChapitre(id: number, pdf: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChapitreDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePdfChapitre(id, pdf, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChapitreRestApi.updatePdfChapitre']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {File} video 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateVideoChapitre(id: number, video: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChapitreDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateVideoChapitre(id, video, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChapitreRestApi.updateVideoChapitre']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ChapitreRestApi - factory interface
 * @export
 */
export const ChapitreRestApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ChapitreRestApiFp(configuration)
    return {
        /**
         * 
         * @param {number} chapitreId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completeChapter(chapitreId: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.completeChapter(chapitreId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ChapitreDTO} chapitreDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createChapitre(chapitreDTO: ChapitreDTO, options?: RawAxiosRequestConfig): AxiosPromise<ChapitreDTO> {
            return localVarFp.createChapitre(chapitreDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} chapitre 
         * @param {File} video 
         * @param {File} pdf 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createChapitreWithVideoAndPdf(chapitre: string, video: File, pdf: File, options?: RawAxiosRequestConfig): AxiosPromise<ChapitreDTO> {
            return localVarFp.createChapitreWithVideoAndPdf(chapitre, video, pdf, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteChapitre(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteChapitre(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteChapitrePdf(id: number, options?: RawAxiosRequestConfig): AxiosPromise<ChapitreDTO> {
            return localVarFp.deleteChapitrePdf(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteChapitreVideo(id: number, options?: RawAxiosRequestConfig): AxiosPromise<ChapitreDTO> {
            return localVarFp.deleteChapitreVideo(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllChapitres(options?: RawAxiosRequestConfig): AxiosPromise<Array<ChapitreDTO>> {
            return localVarFp.getAllChapitres(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChapitreById(id: number, options?: RawAxiosRequestConfig): AxiosPromise<ChapitreDTO> {
            return localVarFp.getChapitreById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} courId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChapitresByCourId(courId: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<ChapitreDTO>> {
            return localVarFp.getChapitresByCourId(courId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} coursId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProgress(coursId: number, options?: RawAxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.getProgress(coursId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {ChapitreDTO} chapitreDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateChapitre(id: number, chapitreDTO: ChapitreDTO, options?: RawAxiosRequestConfig): AxiosPromise<ChapitreDTO> {
            return localVarFp.updateChapitre(id, chapitreDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {File} pdf 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePdfChapitre(id: number, pdf: File, options?: RawAxiosRequestConfig): AxiosPromise<ChapitreDTO> {
            return localVarFp.updatePdfChapitre(id, pdf, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {File} video 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateVideoChapitre(id: number, video: File, options?: RawAxiosRequestConfig): AxiosPromise<ChapitreDTO> {
            return localVarFp.updateVideoChapitre(id, video, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ChapitreRestApi - object-oriented interface
 * @export
 * @class ChapitreRestApi
 * @extends {BaseAPI}
 */
export class ChapitreRestApi extends BaseAPI {
    /**
     * 
     * @param {number} chapitreId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChapitreRestApi
     */
    public completeChapter(chapitreId: number, options?: RawAxiosRequestConfig) {
        return ChapitreRestApiFp(this.configuration).completeChapter(chapitreId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ChapitreDTO} chapitreDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChapitreRestApi
     */
    public createChapitre(chapitreDTO: ChapitreDTO, options?: RawAxiosRequestConfig) {
        return ChapitreRestApiFp(this.configuration).createChapitre(chapitreDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} chapitre 
     * @param {File} video 
     * @param {File} pdf 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChapitreRestApi
     */
    public createChapitreWithVideoAndPdf(chapitre: string, video: File, pdf: File, options?: RawAxiosRequestConfig) {
        return ChapitreRestApiFp(this.configuration).createChapitreWithVideoAndPdf(chapitre, video, pdf, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChapitreRestApi
     */
    public deleteChapitre(id: number, options?: RawAxiosRequestConfig) {
        return ChapitreRestApiFp(this.configuration).deleteChapitre(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChapitreRestApi
     */
    public deleteChapitrePdf(id: number, options?: RawAxiosRequestConfig) {
        return ChapitreRestApiFp(this.configuration).deleteChapitrePdf(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChapitreRestApi
     */
    public deleteChapitreVideo(id: number, options?: RawAxiosRequestConfig) {
        return ChapitreRestApiFp(this.configuration).deleteChapitreVideo(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChapitreRestApi
     */
    public getAllChapitres(options?: RawAxiosRequestConfig) {
        return ChapitreRestApiFp(this.configuration).getAllChapitres(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChapitreRestApi
     */
    public getChapitreById(id: number, options?: RawAxiosRequestConfig) {
        return ChapitreRestApiFp(this.configuration).getChapitreById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} courId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChapitreRestApi
     */
    public getChapitresByCourId(courId: number, options?: RawAxiosRequestConfig) {
        return ChapitreRestApiFp(this.configuration).getChapitresByCourId(courId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} coursId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChapitreRestApi
     */
    public getProgress(coursId: number, options?: RawAxiosRequestConfig) {
        return ChapitreRestApiFp(this.configuration).getProgress(coursId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {ChapitreDTO} chapitreDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChapitreRestApi
     */
    public updateChapitre(id: number, chapitreDTO: ChapitreDTO, options?: RawAxiosRequestConfig) {
        return ChapitreRestApiFp(this.configuration).updateChapitre(id, chapitreDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {File} pdf 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChapitreRestApi
     */
    public updatePdfChapitre(id: number, pdf: File, options?: RawAxiosRequestConfig) {
        return ChapitreRestApiFp(this.configuration).updatePdfChapitre(id, pdf, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {File} video 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChapitreRestApi
     */
    public updateVideoChapitre(id: number, video: File, options?: RawAxiosRequestConfig) {
        return ChapitreRestApiFp(this.configuration).updateVideoChapitre(id, video, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CoursRestApi - axios parameter creator
 * @export
 */
export const CoursRestApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CoursDTO} coursDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCours: async (coursDTO: CoursDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'coursDTO' is not null or undefined
            assertParamExists('createCours', 'coursDTO', coursDTO)
            const localVarPath = `/cours`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(coursDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCours: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteCours', 'id', id)
            const localVarPath = `/cours/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCours: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/cours`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCoursById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getCoursById', 'id', id)
            const localVarPath = `/cours/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} matiereId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCoursesByMatiereId: async (matiereId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'matiereId' is not null or undefined
            assertParamExists('getCoursesByMatiereId', 'matiereId', matiereId)
            const localVarPath = `/cours/matiere/{matiereId}`
                .replace(`{${"matiereId"}}`, encodeURIComponent(String(matiereId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {CoursDTO} coursDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCours: async (id: number, coursDTO: CoursDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateCours', 'id', id)
            // verify required parameter 'coursDTO' is not null or undefined
            assertParamExists('updateCours', 'coursDTO', coursDTO)
            const localVarPath = `/cours/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(coursDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CoursRestApi - functional programming interface
 * @export
 */
export const CoursRestApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CoursRestApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CoursDTO} coursDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCours(coursDTO: CoursDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoursDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCours(coursDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CoursRestApi.createCours']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCours(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCours(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CoursRestApi.deleteCours']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllCours(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CoursDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllCours(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CoursRestApi.getAllCours']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCoursById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoursDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCoursById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CoursRestApi.getCoursById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} matiereId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCoursesByMatiereId(matiereId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CoursDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCoursesByMatiereId(matiereId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CoursRestApi.getCoursesByMatiereId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {CoursDTO} coursDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCours(id: number, coursDTO: CoursDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoursDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCours(id, coursDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CoursRestApi.updateCours']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CoursRestApi - factory interface
 * @export
 */
export const CoursRestApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CoursRestApiFp(configuration)
    return {
        /**
         * 
         * @param {CoursDTO} coursDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCours(coursDTO: CoursDTO, options?: RawAxiosRequestConfig): AxiosPromise<CoursDTO> {
            return localVarFp.createCours(coursDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCours(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteCours(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCours(options?: RawAxiosRequestConfig): AxiosPromise<Array<CoursDTO>> {
            return localVarFp.getAllCours(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCoursById(id: number, options?: RawAxiosRequestConfig): AxiosPromise<CoursDTO> {
            return localVarFp.getCoursById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} matiereId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCoursesByMatiereId(matiereId: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<CoursDTO>> {
            return localVarFp.getCoursesByMatiereId(matiereId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {CoursDTO} coursDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCours(id: number, coursDTO: CoursDTO, options?: RawAxiosRequestConfig): AxiosPromise<CoursDTO> {
            return localVarFp.updateCours(id, coursDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CoursRestApi - object-oriented interface
 * @export
 * @class CoursRestApi
 * @extends {BaseAPI}
 */
export class CoursRestApi extends BaseAPI {
    /**
     * 
     * @param {CoursDTO} coursDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoursRestApi
     */
    public createCours(coursDTO: CoursDTO, options?: RawAxiosRequestConfig) {
        return CoursRestApiFp(this.configuration).createCours(coursDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoursRestApi
     */
    public deleteCours(id: number, options?: RawAxiosRequestConfig) {
        return CoursRestApiFp(this.configuration).deleteCours(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoursRestApi
     */
    public getAllCours(options?: RawAxiosRequestConfig) {
        return CoursRestApiFp(this.configuration).getAllCours(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoursRestApi
     */
    public getCoursById(id: number, options?: RawAxiosRequestConfig) {
        return CoursRestApiFp(this.configuration).getCoursById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} matiereId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoursRestApi
     */
    public getCoursesByMatiereId(matiereId: number, options?: RawAxiosRequestConfig) {
        return CoursRestApiFp(this.configuration).getCoursesByMatiereId(matiereId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {CoursDTO} coursDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoursRestApi
     */
    public updateCours(id: number, coursDTO: CoursDTO, options?: RawAxiosRequestConfig) {
        return CoursRestApiFp(this.configuration).updateCours(id, coursDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * FileRestApi - axios parameter creator
 * @export
 */
export const FileRestApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} fileName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFile: async (fileName: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileName' is not null or undefined
            assertParamExists('getFile', 'fileName', fileName)
            const localVarPath = `/file/{fileName}`
                .replace(`{${"fileName"}}`, encodeURIComponent(String(fileName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} imageName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getImage: async (imageName: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'imageName' is not null or undefined
            assertParamExists('getImage', 'imageName', imageName)
            const localVarPath = `/image/{imageName}`
                .replace(`{${"imageName"}}`, encodeURIComponent(String(imageName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} videoName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVideo: async (videoName: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'videoName' is not null or undefined
            assertParamExists('getVideo', 'videoName', videoName)
            const localVarPath = `/video/{videoName}`
                .replace(`{${"videoName"}}`, encodeURIComponent(String(videoName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FileRestApi - functional programming interface
 * @export
 */
export const FileRestApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FileRestApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} fileName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFile(fileName: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFile(fileName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FileRestApi.getFile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} imageName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getImage(imageName: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getImage(imageName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FileRestApi.getImage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} videoName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVideo(videoName: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVideo(videoName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FileRestApi.getVideo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * FileRestApi - factory interface
 * @export
 */
export const FileRestApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FileRestApiFp(configuration)
    return {
        /**
         * 
         * @param {string} fileName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFile(fileName: string, options?: RawAxiosRequestConfig): AxiosPromise<File> {
            return localVarFp.getFile(fileName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} imageName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getImage(imageName: string, options?: RawAxiosRequestConfig): AxiosPromise<File> {
            return localVarFp.getImage(imageName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} videoName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVideo(videoName: string, options?: RawAxiosRequestConfig): AxiosPromise<File> {
            return localVarFp.getVideo(videoName, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FileRestApi - object-oriented interface
 * @export
 * @class FileRestApi
 * @extends {BaseAPI}
 */
export class FileRestApi extends BaseAPI {
    /**
     * 
     * @param {string} fileName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileRestApi
     */
    public getFile(fileName: string, options?: RawAxiosRequestConfig) {
        return FileRestApiFp(this.configuration).getFile(fileName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} imageName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileRestApi
     */
    public getImage(imageName: string, options?: RawAxiosRequestConfig) {
        return FileRestApiFp(this.configuration).getImage(imageName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} videoName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileRestApi
     */
    public getVideo(videoName: string, options?: RawAxiosRequestConfig) {
        return FileRestApiFp(this.configuration).getVideo(videoName, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MatiereRestApi - axios parameter creator
 * @export
 */
export const MatiereRestApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} matiere 
         * @param {File} image 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMatiereWithImage: async (matiere: string, image: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'matiere' is not null or undefined
            assertParamExists('createMatiereWithImage', 'matiere', matiere)
            // verify required parameter 'image' is not null or undefined
            assertParamExists('createMatiereWithImage', 'image', image)
            const localVarPath = `/matieres/upload`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (matiere !== undefined) {
                localVarQueryParameter['matiere'] = matiere;
            }


            if (image !== undefined) { 
                localVarFormParams.append('image', image as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMatiere: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteMatiere', 'id', id)
            const localVarPath = `/matieres/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllMatieres: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/matieres`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMatiereById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getMatiereById', 'id', id)
            const localVarPath = `/matieres/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [keyword] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchMatieres: async (keyword?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/matieres/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {MatiereDTO} matiereDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMatiere: async (id: number, matiereDTO: MatiereDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateMatiere', 'id', id)
            // verify required parameter 'matiereDTO' is not null or undefined
            assertParamExists('updateMatiere', 'matiereDTO', matiereDTO)
            const localVarPath = `/matieres/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(matiereDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MatiereRestApi - functional programming interface
 * @export
 */
export const MatiereRestApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MatiereRestApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} matiere 
         * @param {File} image 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMatiereWithImage(matiere: string, image: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MatiereDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createMatiereWithImage(matiere, image, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MatiereRestApi.createMatiereWithImage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMatiere(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMatiere(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MatiereRestApi.deleteMatiere']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllMatieres(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MatiereDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllMatieres(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MatiereRestApi.getAllMatieres']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMatiereById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MatiereDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMatiereById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MatiereRestApi.getMatiereById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [keyword] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchMatieres(keyword?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MatiereDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchMatieres(keyword, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MatiereRestApi.searchMatieres']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {MatiereDTO} matiereDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMatiere(id: number, matiereDTO: MatiereDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MatiereDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMatiere(id, matiereDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MatiereRestApi.updateMatiere']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MatiereRestApi - factory interface
 * @export
 */
export const MatiereRestApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MatiereRestApiFp(configuration)
    return {
        /**
         * 
         * @param {string} matiere 
         * @param {File} image 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMatiereWithImage(matiere: string, image: File, options?: RawAxiosRequestConfig): AxiosPromise<MatiereDTO> {
            return localVarFp.createMatiereWithImage(matiere, image, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMatiere(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteMatiere(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllMatieres(options?: RawAxiosRequestConfig): AxiosPromise<Array<MatiereDTO>> {
            return localVarFp.getAllMatieres(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMatiereById(id: number, options?: RawAxiosRequestConfig): AxiosPromise<MatiereDTO> {
            return localVarFp.getMatiereById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [keyword] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchMatieres(keyword?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<MatiereDTO>> {
            return localVarFp.searchMatieres(keyword, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {MatiereDTO} matiereDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMatiere(id: number, matiereDTO: MatiereDTO, options?: RawAxiosRequestConfig): AxiosPromise<MatiereDTO> {
            return localVarFp.updateMatiere(id, matiereDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MatiereRestApi - object-oriented interface
 * @export
 * @class MatiereRestApi
 * @extends {BaseAPI}
 */
export class MatiereRestApi extends BaseAPI {
    /**
     * 
     * @param {string} matiere 
     * @param {File} image 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatiereRestApi
     */
    public createMatiereWithImage(matiere: string, image: File, options?: RawAxiosRequestConfig) {
        return MatiereRestApiFp(this.configuration).createMatiereWithImage(matiere, image, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatiereRestApi
     */
    public deleteMatiere(id: number, options?: RawAxiosRequestConfig) {
        return MatiereRestApiFp(this.configuration).deleteMatiere(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatiereRestApi
     */
    public getAllMatieres(options?: RawAxiosRequestConfig) {
        return MatiereRestApiFp(this.configuration).getAllMatieres(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatiereRestApi
     */
    public getMatiereById(id: number, options?: RawAxiosRequestConfig) {
        return MatiereRestApiFp(this.configuration).getMatiereById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [keyword] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatiereRestApi
     */
    public searchMatieres(keyword?: string, options?: RawAxiosRequestConfig) {
        return MatiereRestApiFp(this.configuration).searchMatieres(keyword, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {MatiereDTO} matiereDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatiereRestApi
     */
    public updateMatiere(id: number, matiereDTO: MatiereDTO, options?: RawAxiosRequestConfig) {
        return MatiereRestApiFp(this.configuration).updateMatiere(id, matiereDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProgressRestApi - axios parameter creator
 * @export
 */
export const ProgressRestApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ProgressDTO} progressDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProgress: async (progressDTO: ProgressDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'progressDTO' is not null or undefined
            assertParamExists('createProgress', 'progressDTO', progressDTO)
            const localVarPath = `/progresss`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(progressDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProgress: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteProgress', 'id', id)
            const localVarPath = `/progresss/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllProgresses: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/progresss`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProgressById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getProgressById', 'id', id)
            const localVarPath = `/progresss/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ProgressDTO} progressDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProgress: async (id: number, progressDTO: ProgressDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateProgress', 'id', id)
            // verify required parameter 'progressDTO' is not null or undefined
            assertParamExists('updateProgress', 'progressDTO', progressDTO)
            const localVarPath = `/progresss/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(progressDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProgressRestApi - functional programming interface
 * @export
 */
export const ProgressRestApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProgressRestApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {ProgressDTO} progressDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProgress(progressDTO: ProgressDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProgressDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createProgress(progressDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProgressRestApi.createProgress']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProgress(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteProgress(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProgressRestApi.deleteProgress']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllProgresses(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProgressDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllProgresses(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProgressRestApi.getAllProgresses']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProgressById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProgressDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProgressById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProgressRestApi.getProgressById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {ProgressDTO} progressDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateProgress(id: number, progressDTO: ProgressDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProgressDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateProgress(id, progressDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProgressRestApi.updateProgress']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ProgressRestApi - factory interface
 * @export
 */
export const ProgressRestApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProgressRestApiFp(configuration)
    return {
        /**
         * 
         * @param {ProgressDTO} progressDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProgress(progressDTO: ProgressDTO, options?: RawAxiosRequestConfig): AxiosPromise<ProgressDTO> {
            return localVarFp.createProgress(progressDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProgress(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteProgress(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllProgresses(options?: RawAxiosRequestConfig): AxiosPromise<Array<ProgressDTO>> {
            return localVarFp.getAllProgresses(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProgressById(id: number, options?: RawAxiosRequestConfig): AxiosPromise<ProgressDTO> {
            return localVarFp.getProgressById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {ProgressDTO} progressDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProgress(id: number, progressDTO: ProgressDTO, options?: RawAxiosRequestConfig): AxiosPromise<ProgressDTO> {
            return localVarFp.updateProgress(id, progressDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProgressRestApi - object-oriented interface
 * @export
 * @class ProgressRestApi
 * @extends {BaseAPI}
 */
export class ProgressRestApi extends BaseAPI {
    /**
     * 
     * @param {ProgressDTO} progressDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProgressRestApi
     */
    public createProgress(progressDTO: ProgressDTO, options?: RawAxiosRequestConfig) {
        return ProgressRestApiFp(this.configuration).createProgress(progressDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProgressRestApi
     */
    public deleteProgress(id: number, options?: RawAxiosRequestConfig) {
        return ProgressRestApiFp(this.configuration).deleteProgress(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProgressRestApi
     */
    public getAllProgresses(options?: RawAxiosRequestConfig) {
        return ProgressRestApiFp(this.configuration).getAllProgresses(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProgressRestApi
     */
    public getProgressById(id: number, options?: RawAxiosRequestConfig) {
        return ProgressRestApiFp(this.configuration).getProgressById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {ProgressDTO} progressDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProgressRestApi
     */
    public updateProgress(id: number, progressDTO: ProgressDTO, options?: RawAxiosRequestConfig) {
        return ProgressRestApiFp(this.configuration).updateProgress(id, progressDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * QuestionRestApi - axios parameter creator
 * @export
 */
export const QuestionRestApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} idQuiz 
         * @param {QuestionDTO} questionDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createQuestionByQuiz: async (idQuiz: number, questionDTO: QuestionDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idQuiz' is not null or undefined
            assertParamExists('createQuestionByQuiz', 'idQuiz', idQuiz)
            // verify required parameter 'questionDTO' is not null or undefined
            assertParamExists('createQuestionByQuiz', 'questionDTO', questionDTO)
            const localVarPath = `/questions/{idQuiz}`
                .replace(`{${"idQuiz"}}`, encodeURIComponent(String(idQuiz)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(questionDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQuestion: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteQuestion', 'id', id)
            const localVarPath = `/questions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllQuestions: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/questions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuestionById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getQuestionById', 'id', id)
            const localVarPath = `/questions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {QuestionDTO} questionDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateQuestion: async (id: number, questionDTO: QuestionDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateQuestion', 'id', id)
            // verify required parameter 'questionDTO' is not null or undefined
            assertParamExists('updateQuestion', 'questionDTO', questionDTO)
            const localVarPath = `/questions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(questionDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * QuestionRestApi - functional programming interface
 * @export
 */
export const QuestionRestApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = QuestionRestApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} idQuiz 
         * @param {QuestionDTO} questionDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createQuestionByQuiz(idQuiz: number, questionDTO: QuestionDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuestionDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createQuestionByQuiz(idQuiz, questionDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QuestionRestApi.createQuestionByQuiz']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteQuestion(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteQuestion(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QuestionRestApi.deleteQuestion']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllQuestions(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<QuestionDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllQuestions(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QuestionRestApi.getAllQuestions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getQuestionById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuestionDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getQuestionById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QuestionRestApi.getQuestionById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {QuestionDTO} questionDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateQuestion(id: number, questionDTO: QuestionDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuestionDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateQuestion(id, questionDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QuestionRestApi.updateQuestion']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * QuestionRestApi - factory interface
 * @export
 */
export const QuestionRestApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = QuestionRestApiFp(configuration)
    return {
        /**
         * 
         * @param {number} idQuiz 
         * @param {QuestionDTO} questionDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createQuestionByQuiz(idQuiz: number, questionDTO: QuestionDTO, options?: RawAxiosRequestConfig): AxiosPromise<QuestionDTO> {
            return localVarFp.createQuestionByQuiz(idQuiz, questionDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQuestion(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteQuestion(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllQuestions(options?: RawAxiosRequestConfig): AxiosPromise<Array<QuestionDTO>> {
            return localVarFp.getAllQuestions(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuestionById(id: number, options?: RawAxiosRequestConfig): AxiosPromise<QuestionDTO> {
            return localVarFp.getQuestionById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {QuestionDTO} questionDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateQuestion(id: number, questionDTO: QuestionDTO, options?: RawAxiosRequestConfig): AxiosPromise<QuestionDTO> {
            return localVarFp.updateQuestion(id, questionDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * QuestionRestApi - object-oriented interface
 * @export
 * @class QuestionRestApi
 * @extends {BaseAPI}
 */
export class QuestionRestApi extends BaseAPI {
    /**
     * 
     * @param {number} idQuiz 
     * @param {QuestionDTO} questionDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionRestApi
     */
    public createQuestionByQuiz(idQuiz: number, questionDTO: QuestionDTO, options?: RawAxiosRequestConfig) {
        return QuestionRestApiFp(this.configuration).createQuestionByQuiz(idQuiz, questionDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionRestApi
     */
    public deleteQuestion(id: number, options?: RawAxiosRequestConfig) {
        return QuestionRestApiFp(this.configuration).deleteQuestion(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionRestApi
     */
    public getAllQuestions(options?: RawAxiosRequestConfig) {
        return QuestionRestApiFp(this.configuration).getAllQuestions(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionRestApi
     */
    public getQuestionById(id: number, options?: RawAxiosRequestConfig) {
        return QuestionRestApiFp(this.configuration).getQuestionById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {QuestionDTO} questionDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionRestApi
     */
    public updateQuestion(id: number, questionDTO: QuestionDTO, options?: RawAxiosRequestConfig) {
        return QuestionRestApiFp(this.configuration).updateQuestion(id, questionDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * QuizRestApi - axios parameter creator
 * @export
 */
export const QuizRestApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {QuizDTO} quizDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createQuiz: async (quizDTO: QuizDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'quizDTO' is not null or undefined
            assertParamExists('createQuiz', 'quizDTO', quizDTO)
            const localVarPath = `/quizs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(quizDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQuiz: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteQuiz', 'id', id)
            const localVarPath = `/quizs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllQuizs: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/quizs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} courId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuizByCourId: async (courId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'courId' is not null or undefined
            assertParamExists('getQuizByCourId', 'courId', courId)
            const localVarPath = `/quizs/cour/{courId}`
                .replace(`{${"courId"}}`, encodeURIComponent(String(courId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuizById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getQuizById', 'id', id)
            const localVarPath = `/quizs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {QuizDTO} quizDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateQuiz: async (id: number, quizDTO: QuizDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateQuiz', 'id', id)
            // verify required parameter 'quizDTO' is not null or undefined
            assertParamExists('updateQuiz', 'quizDTO', quizDTO)
            const localVarPath = `/quizs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(quizDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * QuizRestApi - functional programming interface
 * @export
 */
export const QuizRestApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = QuizRestApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {QuizDTO} quizDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createQuiz(quizDTO: QuizDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuizDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createQuiz(quizDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QuizRestApi.createQuiz']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteQuiz(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteQuiz(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QuizRestApi.deleteQuiz']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllQuizs(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<QuizDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllQuizs(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QuizRestApi.getAllQuizs']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} courId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getQuizByCourId(courId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuizDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getQuizByCourId(courId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QuizRestApi.getQuizByCourId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getQuizById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuizDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getQuizById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QuizRestApi.getQuizById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {QuizDTO} quizDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateQuiz(id: number, quizDTO: QuizDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuizDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateQuiz(id, quizDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QuizRestApi.updateQuiz']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * QuizRestApi - factory interface
 * @export
 */
export const QuizRestApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = QuizRestApiFp(configuration)
    return {
        /**
         * 
         * @param {QuizDTO} quizDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createQuiz(quizDTO: QuizDTO, options?: RawAxiosRequestConfig): AxiosPromise<QuizDTO> {
            return localVarFp.createQuiz(quizDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQuiz(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteQuiz(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllQuizs(options?: RawAxiosRequestConfig): AxiosPromise<Array<QuizDTO>> {
            return localVarFp.getAllQuizs(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} courId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuizByCourId(courId: number, options?: RawAxiosRequestConfig): AxiosPromise<QuizDTO> {
            return localVarFp.getQuizByCourId(courId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuizById(id: number, options?: RawAxiosRequestConfig): AxiosPromise<QuizDTO> {
            return localVarFp.getQuizById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {QuizDTO} quizDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateQuiz(id: number, quizDTO: QuizDTO, options?: RawAxiosRequestConfig): AxiosPromise<QuizDTO> {
            return localVarFp.updateQuiz(id, quizDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * QuizRestApi - object-oriented interface
 * @export
 * @class QuizRestApi
 * @extends {BaseAPI}
 */
export class QuizRestApi extends BaseAPI {
    /**
     * 
     * @param {QuizDTO} quizDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuizRestApi
     */
    public createQuiz(quizDTO: QuizDTO, options?: RawAxiosRequestConfig) {
        return QuizRestApiFp(this.configuration).createQuiz(quizDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuizRestApi
     */
    public deleteQuiz(id: number, options?: RawAxiosRequestConfig) {
        return QuizRestApiFp(this.configuration).deleteQuiz(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuizRestApi
     */
    public getAllQuizs(options?: RawAxiosRequestConfig) {
        return QuizRestApiFp(this.configuration).getAllQuizs(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} courId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuizRestApi
     */
    public getQuizByCourId(courId: number, options?: RawAxiosRequestConfig) {
        return QuizRestApiFp(this.configuration).getQuizByCourId(courId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuizRestApi
     */
    public getQuizById(id: number, options?: RawAxiosRequestConfig) {
        return QuizRestApiFp(this.configuration).getQuizById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {QuizDTO} quizDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuizRestApi
     */
    public updateQuiz(id: number, quizDTO: QuizDTO, options?: RawAxiosRequestConfig) {
        return QuizRestApiFp(this.configuration).updateQuiz(id, quizDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ReponseRestApi - axios parameter creator
 * @export
 */
export const ReponseRestApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ReponseDTO} reponseDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createReponse: async (reponseDTO: ReponseDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'reponseDTO' is not null or undefined
            assertParamExists('createReponse', 'reponseDTO', reponseDTO)
            const localVarPath = `/reponses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(reponseDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteReponse: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteReponse', 'id', id)
            const localVarPath = `/reponses/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllReponses: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/reponses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReponseById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getReponseById', 'id', id)
            const localVarPath = `/reponses/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ReponseDTO} reponseDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateReponse: async (id: number, reponseDTO: ReponseDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateReponse', 'id', id)
            // verify required parameter 'reponseDTO' is not null or undefined
            assertParamExists('updateReponse', 'reponseDTO', reponseDTO)
            const localVarPath = `/reponses/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(reponseDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReponseRestApi - functional programming interface
 * @export
 */
export const ReponseRestApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReponseRestApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {ReponseDTO} reponseDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createReponse(reponseDTO: ReponseDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createReponse(reponseDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReponseRestApi.createReponse']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteReponse(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteReponse(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReponseRestApi.deleteReponse']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllReponses(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ReponseDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllReponses(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReponseRestApi.getAllReponses']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReponseById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getReponseById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReponseRestApi.getReponseById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {ReponseDTO} reponseDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateReponse(id: number, reponseDTO: ReponseDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateReponse(id, reponseDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReponseRestApi.updateReponse']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ReponseRestApi - factory interface
 * @export
 */
export const ReponseRestApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReponseRestApiFp(configuration)
    return {
        /**
         * 
         * @param {ReponseDTO} reponseDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createReponse(reponseDTO: ReponseDTO, options?: RawAxiosRequestConfig): AxiosPromise<ReponseDTO> {
            return localVarFp.createReponse(reponseDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteReponse(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteReponse(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllReponses(options?: RawAxiosRequestConfig): AxiosPromise<Array<ReponseDTO>> {
            return localVarFp.getAllReponses(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReponseById(id: number, options?: RawAxiosRequestConfig): AxiosPromise<ReponseDTO> {
            return localVarFp.getReponseById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {ReponseDTO} reponseDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateReponse(id: number, reponseDTO: ReponseDTO, options?: RawAxiosRequestConfig): AxiosPromise<ReponseDTO> {
            return localVarFp.updateReponse(id, reponseDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReponseRestApi - object-oriented interface
 * @export
 * @class ReponseRestApi
 * @extends {BaseAPI}
 */
export class ReponseRestApi extends BaseAPI {
    /**
     * 
     * @param {ReponseDTO} reponseDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReponseRestApi
     */
    public createReponse(reponseDTO: ReponseDTO, options?: RawAxiosRequestConfig) {
        return ReponseRestApiFp(this.configuration).createReponse(reponseDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReponseRestApi
     */
    public deleteReponse(id: number, options?: RawAxiosRequestConfig) {
        return ReponseRestApiFp(this.configuration).deleteReponse(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReponseRestApi
     */
    public getAllReponses(options?: RawAxiosRequestConfig) {
        return ReponseRestApiFp(this.configuration).getAllReponses(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReponseRestApi
     */
    public getReponseById(id: number, options?: RawAxiosRequestConfig) {
        return ReponseRestApiFp(this.configuration).getReponseById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {ReponseDTO} reponseDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReponseRestApi
     */
    public updateReponse(id: number, reponseDTO: ReponseDTO, options?: RawAxiosRequestConfig) {
        return ReponseRestApiFp(this.configuration).updateReponse(id, reponseDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * StatistiqueRestApi - axios parameter creator
 * @export
 */
export const StatistiqueRestApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allMatieresCount: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/statistiques/allMatieresCount`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completedCoursCount: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/statistiques/completedCoursCount`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completedMatiereCount: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/statistiques/completedMatiereCount`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        countCompletedChapitres: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/statistiques/countCompletedChapitres`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} matId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProgressPerCours: async (matId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'matId' is not null or undefined
            assertParamExists('getProgressPerCours', 'matId', matId)
            const localVarPath = `/statistiques/{matId}`
                .replace(`{${"matId"}}`, encodeURIComponent(String(matId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProgressPerMatiere: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/statistiques`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        studentsSignedInLastWeek: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/statistiques/studentsSignedInLastWeek`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StatistiqueRestApi - functional programming interface
 * @export
 */
export const StatistiqueRestApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StatistiqueRestApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async allMatieresCount(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.allMatieresCount(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StatistiqueRestApi.allMatieresCount']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async completedCoursCount(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.completedCoursCount(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StatistiqueRestApi.completedCoursCount']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async completedMatiereCount(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.completedMatiereCount(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StatistiqueRestApi.completedMatiereCount']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async countCompletedChapitres(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.countCompletedChapitres(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StatistiqueRestApi.countCompletedChapitres']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} matId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProgressPerCours(matId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProgressPerCoursDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProgressPerCours(matId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StatistiqueRestApi.getProgressPerCours']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProgressPerMatiere(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProgressPerMatiere>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProgressPerMatiere(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StatistiqueRestApi.getProgressPerMatiere']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async studentsSignedInLastWeek(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.studentsSignedInLastWeek(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StatistiqueRestApi.studentsSignedInLastWeek']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * StatistiqueRestApi - factory interface
 * @export
 */
export const StatistiqueRestApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StatistiqueRestApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allMatieresCount(options?: RawAxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.allMatieresCount(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completedCoursCount(options?: RawAxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.completedCoursCount(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completedMatiereCount(options?: RawAxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.completedMatiereCount(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        countCompletedChapitres(options?: RawAxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.countCompletedChapitres(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} matId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProgressPerCours(matId: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<ProgressPerCoursDTO>> {
            return localVarFp.getProgressPerCours(matId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProgressPerMatiere(options?: RawAxiosRequestConfig): AxiosPromise<Array<ProgressPerMatiere>> {
            return localVarFp.getProgressPerMatiere(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        studentsSignedInLastWeek(options?: RawAxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.studentsSignedInLastWeek(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StatistiqueRestApi - object-oriented interface
 * @export
 * @class StatistiqueRestApi
 * @extends {BaseAPI}
 */
export class StatistiqueRestApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatistiqueRestApi
     */
    public allMatieresCount(options?: RawAxiosRequestConfig) {
        return StatistiqueRestApiFp(this.configuration).allMatieresCount(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatistiqueRestApi
     */
    public completedCoursCount(options?: RawAxiosRequestConfig) {
        return StatistiqueRestApiFp(this.configuration).completedCoursCount(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatistiqueRestApi
     */
    public completedMatiereCount(options?: RawAxiosRequestConfig) {
        return StatistiqueRestApiFp(this.configuration).completedMatiereCount(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatistiqueRestApi
     */
    public countCompletedChapitres(options?: RawAxiosRequestConfig) {
        return StatistiqueRestApiFp(this.configuration).countCompletedChapitres(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} matId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatistiqueRestApi
     */
    public getProgressPerCours(matId: number, options?: RawAxiosRequestConfig) {
        return StatistiqueRestApiFp(this.configuration).getProgressPerCours(matId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatistiqueRestApi
     */
    public getProgressPerMatiere(options?: RawAxiosRequestConfig) {
        return StatistiqueRestApiFp(this.configuration).getProgressPerMatiere(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatistiqueRestApi
     */
    public studentsSignedInLastWeek(options?: RawAxiosRequestConfig) {
        return StatistiqueRestApiFp(this.configuration).studentsSignedInLastWeek(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UsersRestApi - axios parameter creator
 * @export
 */
export const UsersRestApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {UserDTO} userDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser: async (userDTO: UserDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userDTO' is not null or undefined
            assertParamExists('createUser', 'userDTO', userDTO)
            const localVarPath = `/utilisateurs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteUser', 'id', id)
            const localVarPath = `/utilisateurs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} idEtudiant 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        etudiantCompletedCoursCount: async (idEtudiant: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idEtudiant' is not null or undefined
            assertParamExists('etudiantCompletedCoursCount', 'idEtudiant', idEtudiant)
            const localVarPath = `/utilisateurs/completedCoursCount/{idEtudiant}`
                .replace(`{${"idEtudiant"}}`, encodeURIComponent(String(idEtudiant)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} idEtudiant 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        etudiantCompletedMatiereCount: async (idEtudiant: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idEtudiant' is not null or undefined
            assertParamExists('etudiantCompletedMatiereCount', 'idEtudiant', idEtudiant)
            const localVarPath = `/utilisateurs/completedMatiereCount/{idEtudiant}`
                .replace(`{${"idEtudiant"}}`, encodeURIComponent(String(idEtudiant)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} idEtudiant 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        etudiantCountCompletedChapitres: async (idEtudiant: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idEtudiant' is not null or undefined
            assertParamExists('etudiantCountCompletedChapitres', 'idEtudiant', idEtudiant)
            const localVarPath = `/utilisateurs/countCompletedChapitres/{idEtudiant}`
                .replace(`{${"idEtudiant"}}`, encodeURIComponent(String(idEtudiant)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} etudiantId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        etudiantProgressPerMatiere: async (etudiantId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'etudiantId' is not null or undefined
            assertParamExists('etudiantProgressPerMatiere', 'etudiantId', etudiantId)
            const localVarPath = `/utilisateurs/getProgressPerMatiere/{etudiantId}`
                .replace(`{${"etudiantId"}}`, encodeURIComponent(String(etudiantId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsers: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/utilisateurs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} etudiantId 
         * @param {number} matId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEtudiantProgressParCours: async (etudiantId: number, matId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'etudiantId' is not null or undefined
            assertParamExists('getEtudiantProgressParCours', 'etudiantId', etudiantId)
            // verify required parameter 'matId' is not null or undefined
            assertParamExists('getEtudiantProgressParCours', 'matId', matId)
            const localVarPath = `/utilisateurs/getEtudiantProgressParCours/{etudiantId}/{matId}`
                .replace(`{${"etudiantId"}}`, encodeURIComponent(String(etudiantId)))
                .replace(`{${"matId"}}`, encodeURIComponent(String(matId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getUserById', 'id', id)
            const localVarPath = `/utilisateurs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {UserDTO} userDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser: async (id: number, userDTO: UserDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateUser', 'id', id)
            // verify required parameter 'userDTO' is not null or undefined
            assertParamExists('updateUser', 'userDTO', userDTO)
            const localVarPath = `/utilisateurs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersRestApi - functional programming interface
 * @export
 */
export const UsersRestApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersRestApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {UserDTO} userDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUser(userDTO: UserDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUser(userDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersRestApi.createUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUser(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUser(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersRestApi.deleteUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} idEtudiant 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async etudiantCompletedCoursCount(idEtudiant: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.etudiantCompletedCoursCount(idEtudiant, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersRestApi.etudiantCompletedCoursCount']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} idEtudiant 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async etudiantCompletedMatiereCount(idEtudiant: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.etudiantCompletedMatiereCount(idEtudiant, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersRestApi.etudiantCompletedMatiereCount']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} idEtudiant 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async etudiantCountCompletedChapitres(idEtudiant: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.etudiantCountCompletedChapitres(idEtudiant, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersRestApi.etudiantCountCompletedChapitres']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} etudiantId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async etudiantProgressPerMatiere(etudiantId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProgressPerMatiere>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.etudiantProgressPerMatiere(etudiantId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersRestApi.etudiantProgressPerMatiere']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllUsers(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllUsers(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersRestApi.getAllUsers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} etudiantId 
         * @param {number} matId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEtudiantProgressParCours(etudiantId: number, matId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProgressPerCoursDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEtudiantProgressParCours(etudiantId, matId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersRestApi.getEtudiantProgressParCours']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersRestApi.getUserById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {UserDTO} userDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUser(id: number, userDTO: UserDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUser(id, userDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersRestApi.updateUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UsersRestApi - factory interface
 * @export
 */
export const UsersRestApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersRestApiFp(configuration)
    return {
        /**
         * 
         * @param {UserDTO} userDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(userDTO: UserDTO, options?: RawAxiosRequestConfig): AxiosPromise<UserDTO> {
            return localVarFp.createUser(userDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteUser(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} idEtudiant 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        etudiantCompletedCoursCount(idEtudiant: number, options?: RawAxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.etudiantCompletedCoursCount(idEtudiant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} idEtudiant 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        etudiantCompletedMatiereCount(idEtudiant: number, options?: RawAxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.etudiantCompletedMatiereCount(idEtudiant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} idEtudiant 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        etudiantCountCompletedChapitres(idEtudiant: number, options?: RawAxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.etudiantCountCompletedChapitres(idEtudiant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} etudiantId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        etudiantProgressPerMatiere(etudiantId: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<ProgressPerMatiere>> {
            return localVarFp.etudiantProgressPerMatiere(etudiantId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsers(options?: RawAxiosRequestConfig): AxiosPromise<Array<UserDTO>> {
            return localVarFp.getAllUsers(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} etudiantId 
         * @param {number} matId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEtudiantProgressParCours(etudiantId: number, matId: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<ProgressPerCoursDTO>> {
            return localVarFp.getEtudiantProgressParCours(etudiantId, matId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserById(id: number, options?: RawAxiosRequestConfig): AxiosPromise<UserDTO> {
            return localVarFp.getUserById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {UserDTO} userDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser(id: number, userDTO: UserDTO, options?: RawAxiosRequestConfig): AxiosPromise<UserDTO> {
            return localVarFp.updateUser(id, userDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersRestApi - object-oriented interface
 * @export
 * @class UsersRestApi
 * @extends {BaseAPI}
 */
export class UsersRestApi extends BaseAPI {
    /**
     * 
     * @param {UserDTO} userDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersRestApi
     */
    public createUser(userDTO: UserDTO, options?: RawAxiosRequestConfig) {
        return UsersRestApiFp(this.configuration).createUser(userDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersRestApi
     */
    public deleteUser(id: number, options?: RawAxiosRequestConfig) {
        return UsersRestApiFp(this.configuration).deleteUser(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} idEtudiant 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersRestApi
     */
    public etudiantCompletedCoursCount(idEtudiant: number, options?: RawAxiosRequestConfig) {
        return UsersRestApiFp(this.configuration).etudiantCompletedCoursCount(idEtudiant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} idEtudiant 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersRestApi
     */
    public etudiantCompletedMatiereCount(idEtudiant: number, options?: RawAxiosRequestConfig) {
        return UsersRestApiFp(this.configuration).etudiantCompletedMatiereCount(idEtudiant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} idEtudiant 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersRestApi
     */
    public etudiantCountCompletedChapitres(idEtudiant: number, options?: RawAxiosRequestConfig) {
        return UsersRestApiFp(this.configuration).etudiantCountCompletedChapitres(idEtudiant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} etudiantId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersRestApi
     */
    public etudiantProgressPerMatiere(etudiantId: number, options?: RawAxiosRequestConfig) {
        return UsersRestApiFp(this.configuration).etudiantProgressPerMatiere(etudiantId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersRestApi
     */
    public getAllUsers(options?: RawAxiosRequestConfig) {
        return UsersRestApiFp(this.configuration).getAllUsers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} etudiantId 
     * @param {number} matId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersRestApi
     */
    public getEtudiantProgressParCours(etudiantId: number, matId: number, options?: RawAxiosRequestConfig) {
        return UsersRestApiFp(this.configuration).getEtudiantProgressParCours(etudiantId, matId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersRestApi
     */
    public getUserById(id: number, options?: RawAxiosRequestConfig) {
        return UsersRestApiFp(this.configuration).getUserById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {UserDTO} userDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersRestApi
     */
    public updateUser(id: number, userDTO: UserDTO, options?: RawAxiosRequestConfig) {
        return UsersRestApiFp(this.configuration).updateUser(id, userDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



